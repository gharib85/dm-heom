// This file is part of DM-HEOM (https://github.com/noma/dm-heom)
//
// Copyright (c) 2015-2019 Matthias Noack, Zuse Institute Berlin
//
// Licensed under the 3-clause BSD License, see accompanying LICENSE,
// CONTRIBUTORS.md, and README.md for further information.

#include "heom/hierarchy_norm.hpp"

namespace heom {

const std::string hierarchy_norm::embedded_ocl_source_ {
#include "hierarchy_norm.cl.hpp" // NOTE: generated by CMake
};
const std::string hierarchy_norm::embedded_ocl_kernel_name_ { "hierarchy_norm" };

hierarchy_norm::hierarchy_norm(ocl::helper& ocl, const std::string& source_header, const std::string& ocl_compile_options, const ocl::nd_range& range)
	: ocl::kernel_wrapper(ocl, embedded_ocl_source_, embedded_ocl_kernel_name_, source_header, ocl_compile_options, range)
{
}

hierarchy_norm::hierarchy_norm(ocl::helper& ocl, const boost::filesystem::path& hierarchy_norm_file_name, const std::string& hierarchy_norm_kernel_name, const std::string& source_header, const std::string& ocl_compile_options, const ocl::nd_range& range)
		: ocl::kernel_wrapper(ocl, hierarchy_norm_file_name, hierarchy_norm_kernel_name, source_header, ocl_compile_options, range)
{
}

void hierarchy_norm::update(real_t threshold, cl::Buffer& d_mem_norm, cl::Buffer& d_mem_mask, cl::Buffer& hierarchy)
{
	cl_int err = 0;

	// set dynamic kernel arguments
	err = kernel_.setArg(0, threshold);
	ocl::error_handler(err, "clSetKernelArg(0)");
	err = kernel_.setArg(1, d_mem_norm);
	ocl::error_handler(err, "clSetKernelArg(1)");
	err = kernel_.setArg(2, d_mem_mask);
	ocl::error_handler(err, "clSetKernelArg(2)");
	err = kernel_.setArg(3, hierarchy);
	ocl::error_handler(err, "clSetKernelArg(3)");

	// run and benchmark kernel
	run_kernel();
}


void hierarchy_norm::update(cl::Buffer& d_mem_norm, cl::Buffer& hierarchy)
{
	cl_int err = 0;

	// set dynamic kernel arguments
	err = kernel_.setArg(0, -1.0);
	ocl::error_handler(err, "clSetKernelArg(0)");
	err = kernel_.setArg(1, d_mem_norm);
	ocl::error_handler(err, "clSetKernelArg(1)");
	err = kernel_.setArg(2, nullptr);
	ocl::error_handler(err, "clSetKernelArg(2)");
	err = kernel_.setArg(3, hierarchy);
	ocl::error_handler(err, "clSetKernelArg(3)");

	// run and benchmark kernel
	run_kernel();
}


} // namespace heom
