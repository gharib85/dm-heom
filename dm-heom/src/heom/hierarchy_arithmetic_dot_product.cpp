// This file is part of DM-HEOM (https://github.com/noma/dm-heom)
//
// Copyright (c) 2015-2019 Matthias Noack, Zuse Institute Berlin
// Copyright (c) 2016-2017 Lucas Deecke, Zuse Institute Berlin
//
// Licensed under the 3-clause BSD License, see accompanying LICENSE,
// CONTRIBUTORS.md, and README.md for further information.

#include "heom/hierarchy_arithmetic_dot_product.hpp"

#include <numeric>

namespace heom {

const std::string hierarchy_arithmetic_dot_product::embedded_ocl_source_ {
#include "hierarchy_arithmetic_dot_product.cl.hpp"  // NOTE: generated by CMake
};
const std::string hierarchy_arithmetic_dot_product::embedded_ocl_kernel_name_ { "hierarchy_arithmetic_dot_product" };

hierarchy_arithmetic_dot_product::hierarchy_arithmetic_dot_product(ocl::helper& ocl, const std::string& source_header, const std::string& ocl_compile_options, const ocl::nd_range& range, const instance& heom_instance)
	: ocl::kernel_wrapper(ocl, embedded_ocl_source_, embedded_ocl_kernel_name_, source_header, ocl_compile_options, range),
	  heom_instance_(heom_instance)
{
	d_mem_result_ = ocl_.create_buffer(CL_MEM_READ_WRITE, heom_instance_.size_hierarchy_byte(), nullptr);
	result_buffer_ = new complex_t[heom_instance_.states() * heom_instance_.states() * heom_instance_.matrices()];
}

hierarchy_arithmetic_dot_product::hierarchy_arithmetic_dot_product(ocl::helper& ocl, const boost::filesystem::path& hierarchy_arithmetic_dot_product_file_name, const std::string& hierarchy_arithmetic_dot_product_kernel_name, const std::string& source_header, const std::string& ocl_compile_options, const ocl::nd_range& range, const instance& heom_instance)
	: ocl::kernel_wrapper(ocl, hierarchy_arithmetic_dot_product_file_name, hierarchy_arithmetic_dot_product_kernel_name, source_header, ocl_compile_options, range),
	  heom_instance_(heom_instance)
{
	d_mem_result_ = ocl_.create_buffer(CL_MEM_READ_WRITE, heom_instance_.size_hierarchy_byte(), nullptr);
	result_buffer_ = new complex_t[heom_instance_.states() * heom_instance_.states() * heom_instance_.matrices()];
}

hierarchy_arithmetic_dot_product::~hierarchy_arithmetic_dot_product()
{
	delete[] result_buffer_;
}

complex_t hierarchy_arithmetic_dot_product::run(cl::Buffer& d_mem_a, cl::Buffer& d_mem_b)
{
	cl_int err = 0;

	// set dynamic kernel arguments
	err = kernel_.setArg(0, d_mem_a);
	ocl::error_handler(err, "clSetKernelArg(0)");
	err = kernel_.setArg(1, d_mem_b);
	ocl::error_handler(err, "clSetKernelArg(1)");
	err = kernel_.setArg(2, d_mem_result_);
	ocl::error_handler(err, "clSetKernelArg(2)");

	// run and benchmark kernel
	run_kernel();

	// read result from OpenCL buffer
	err = ocl_.queue().enqueueReadBuffer(d_mem_result_, CL_TRUE, 0, heom_instance_.size_hierarchy_byte(), result_buffer_, NULL, NULL);
	ocl::error_handler(err, "clEnqueueReadBuffer(d_mem_result)");
	err = ocl_.queue().finish();
	ocl::error_handler(err, "clFinish()");

	// TODO: replace by OpenCL kernel
	complex_t result = std::accumulate(result_buffer_, result_buffer_ + (heom_instance_.states() * heom_instance_.states() * heom_instance_.matrices()), complex_t(0.0, 0.0));

	return result;
}


} // namespace heom
