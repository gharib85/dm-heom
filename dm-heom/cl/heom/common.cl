// This file is part of DM-HEOM (https://github.com/noma/dm-heom)
//
// Copyright (c) 2015-2019 Matthias Noack, Zuse Institute Berlin
//
// Licensed under the 3-clause BSD License, see accompanying LICENSE,
// CONTRIBUTORS.md, and README.md for further information.

#include "../../../thirdparty/num/cl/types.cl"

#if __OPENCL_VERSION__ <= CL_VERSION_1_1
	#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#endif

typedef uchar mask_t; // possible mask values are 0, 1, 2
enum mask_values {
	MASK_FALSE = 0,
	MASK_TRUE = 1,
	MASK_PROTECTED = 2,
};

constant real_t SQRT_LUT[] = {0,
1.00000000000000000, 1.41421356237309505, 1.73205080756887729,
2.00000000000000000, 2.23606797749978970, 2.44948974278317810,
2.64575131106459059, 2.82842712474619010, 3.00000000000000000,
3.16227766016837933, 3.31662479035539985, 3.46410161513775459,
3.60555127546398929, 3.74165738677394139, 3.87298334620741689,
4.00000000000000000, 4.12310562561766055, 4.24264068711928515,
4.35889894354067355, 4.47213595499957939, 4.58257569495584001,
4.69041575982342955, 4.79583152331271954, 4.89897948556635620,
5.00000000000000000, 5.09901951359278483, 5.19615242270663188,
5.29150262212918118, 5.38516480713450403, 5.47722557505166113,
5.56776436283002192, 5.65685424949238020, 5.74456264653802866,
5.83095189484530047, 5.91607978309961604, 6.00000000000000000,
6.08276253029821969, 6.16441400296897645, 6.24499799839839821,
6.32455532033675866, 6.40312423743284869, 6.48074069840786023,
6.55743852430200065, 6.63324958071079970, 6.70820393249936909,
6.78232998312526814, 6.85565460040104412, 6.92820323027550917,
7.00000000000000000, 7.07106781186547524, 7.14142842854285000,
7.21110255092797859, 7.28010988928051827, 7.34846922834953429,
7.41619848709566295, 7.48331477354788277, 7.54983443527074970,
7.61577310586390829, 7.68114574786860818, 7.74596669241483377,
7.81024967590665439, 7.87400787401181102, 7.93725393319377177
}; 

constant double CONST_SI_HBAR = 1.05457148e-34;
// Intel OpenCL bug?: "initializer element is not a compile-time constant":
//constant double CONST_SI_HBAR_SQRT = sqrt(CONST_SI_HBAR);
#define CONST_SI_HBAR_SQRT = sqrt(CONST_SI_HBAR); 
#define CONST_SI_HBAR_INV_SQRT = sqrt(1.0 / CONST_SI_HBAR);
constant complex_t COMPLEX_I = ((complex_t)(0.0, 1.0));
constant complex_t MINUS_COMPLEX_I = ((complex_t)(0.0, -1.0));

